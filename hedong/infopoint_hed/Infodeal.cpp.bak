#include "Infodeal.h"
#include <string.h>

int CInfoDeal::Init(char* infoDetect,char* service)
{
  
	m_iBatchID = 1;
	m_iSeqID = 1;
	m_iIsServCat=1;
	m_iIsMain=0;
	iTimeUnit=1;
	iFeeUnit=1;
	m_iStart=1;
	m_iRun=1;
	iCountRun=0;
	strcpy(m_szDataType,"");
	strcpy(m_szIdepPath,"");
	strcpy(m_szSep,"\"");
		
	if(chkAllDir(infoDetect)!=0)
  { 
  	getCurTime(sz_errtime);
    wrlog("infomgr","0","",'E','H',1000,001,sz_errtime,"check infopoint dir error",__FILE__,__LINE__);	
		return  -1;
  }
  else
  {
  	strcpy(m_szInfoDetect, infoDetect);	
  }
  
  strcpy(m_szServiceId,service);
	
	if(GetInfoEnv() != 0) 
	{
		getCurTime(sz_errtime);
    wrlog("infomgr","0","",'E','H',1000,001,sz_errtime,"get env error",__FILE__,__LINE__);	
		return -1;
	}
	else
	{
		expTrace("Y", __FILE__, __LINE__, "get env success!");
	}

    /*dbconn_1.Connect("cjcl","cjcl2008","zhjs45");   // 4546 采集系统
	dbconn_2.Connect("view_xdcj","view_xdcj","shlc");  // 市话联采
	dbconn_3.Connect("zhjf","zhjf_20080428","zhjs45"); // 4546 综合计费
	dbconn_4.Connect("zhjs","zhjs_20080428","zhjs45");  // 4546 综合结算	
	dbconn_5.Connect("zhjsmain","zhjsmain123","zhjs");*/  //9596 综合结算3.0  
	//dbconn_2.Connect("tycl","tycl_20080428","zhjf_view");  // 预处理移植到综合计费
	//dbconn_6.Connect("zhtj","zhtj_20080428","zhjf_view"); // 综合统计移到综合计费数据库
	//dbconn_7.Connect("zhjs","zhjs123","zhjs");   // 漫游结算移到结算3.0
	return 0;

}

//获取文件名
int CInfoDeal::GetFileName(char *szFileName, char *szdealtype,char* service)
{
   CBindSQL ds(DBConn);	
   
 //查询和文件名相关的信息

  //获取auditid  typeid  srate  
  ds.Open("select auditid,typeid,srate,netypeid from INFOPOINT_PUB_DEFINE where deal_type=:deal_type");
  ds<<szdealtype;
  ds>>m_info_file.Info_auditid>>m_info_file.Info_typeid>>m_info_file.Info_srate>>m_info_file.Info_netypeid;
  ds.Close();
  
  //得到文件名
   memset(szFileName,0,sizeof(szFileName));
  //修改文件名日期
  // string filedate;
  // string datetemp = new string(m_szChkStart);
 //  filedate=datetemp.substr(0,6);
  // sprintf(szFileName, "%sBOSSNM_0_%s_%s_%s_%s_%s_020_%08d_%03d.json", m_szOutPath,m_info_file.Info_netypeid, m_info_file.Info_auditid,m_info_file.Info_typeid,m_info_file.Info_srate, filedate, m_iSeqID,m_iOrder);
  
 //BOSSNM_[SysLoc]_[NeTypeId]_[AuditId]_[Type]_[Freq]_[Date]_[AreaCode]_[SeqNum]_[DuplNum]_[SplitSeq].json
 //BOSSNM_[容灾标识]_[业务系统编码]_[稽核点编码]_[信息点类型]_[传输频度]_[日期]_[区域编码]_[流水序号]_[重传标志]_[分割文件序列号].json
    sprintf(szFileName, "%sBOSSNM_0_%s_%s_%s_%s_%s_001_%08d_%03d_0001.json", m_szOutPath,m_info_file.Info_netypeid, m_info_file.Info_auditid,m_info_file.Info_typeid,m_info_file.Info_srate, m_szToday, m_iSeqID,m_iOrder);
	return 0;
}


int CInfoDeal::GetFileValue(char* szDealtype,char *starttime,char *endtime)
{
   CBindSQL ds(DBConn);	  
 //获取文件记录字段总数 
  sprintf(szSql,"select count(*) from INFO_FILE_FMT where DEAL_TYPE = '%s' ",szDealtype);
  ds.Open(szSql);
  ds>>m_info_file.NInfo_Item_Count ;
  ds.Close();	

//新增存储过程执行20150812 ww 
  char  proc[100];
     sprintf(szSql,"select PROC_NAME  from INFO_FILE_DEFINE where DEAL_TYPE = '%s' ",szDealtype);
     std::cout <<szSql<< endl;       ds.Open(szSql);
     ds>>proc;
     ds.Close();
     if(proc=="")
	{                     expTrace("Y", __FILE__, __LINE__, "没有配置存储过程，不执行存储过程");
		//std::cout << "没有配置存储过程，不执行存储过程" << endl;
	}
	else
	{
		expTrace("Y", __FILE__, __LINE__, "执行存储过程: %s",proc);
	//	std::cout << "执行存储过程:" << proc << endl;		 ds.Open(proc,FUNCTION_OR_PROCEDURE);		//存储过程模式执行		 	{		 	       std::cout << "执行存储过程:" << proc << endl;			}
	/*	if(==0)   		{			std::cout <<"执行存储过程成功!!!" << endl;			expTrace("Y", __FILE__, __LINE__, "执行存储过程成功!!!");		}                     if(ds.Open(proc,FUNCTION_OR_PROCEDURE)==INVALID_PARAMETER)                     	{                     		std::cout <<"执行存储过程失败!!!"<<endl;                     		expTrace("Y", __FILE__, __LINE__, "执行存储过程失败!!! 错误码:    %d",INVALID_PARAMETER);                     	}    */
		ds.Close();
	}
 //查询存储数据的表格,2013-01-11 添加密码
  sprintf(szSql,"select table_name from INFO_FILE_DEFINE where deal_type = '%s' ",szDealtype);
  ds.Open(szSql);
  expTrace("Y", __FILE__, __LINE__, "%s",szSql);
  ds>>m_info_file.Info_tablename;
  //std::cout << "字段值" << m_info_file.Info_sysname << m_info_file.Info_username << m_info_file.Info_password<< std::endl;
  ds.Close();
  
  //获取文件需要存储的字段名
  if(m_info_file.NInfo_Item_Count!=0)
  	{
	  ds.Open("select table_item,item_type from INFO_FILE_FMT where deal_type=:deal_type ");
	  ds<<szDealtype;
	  for( int i=0;i<m_info_file.NInfo_Item_Count;i++)
	  	{
	  	ds>>m_info_file.Info_Item[i]>>m_info_file.NItem_Type[i];
	  	}
	  ds.Close();
  	}
 
   // 通过不同的连接访问数据库表
  sprintf(szSql,"select count(*) from %s where create_minute >= '%s' and create_minute < '%s' ",m_info_file.Info_tablename,starttime,endtime);try{	ds.Open(szSql);
  expTrace("Y", __FILE__, __LINE__, "%s",szSql);
  ds>>m_info_file.NInfo_value_Count;
  expTrace("Y", __FILE__, __LINE__, "%d",m_info_file.NInfo_value_Count);
  ds.Close();	   	}catch{			}
  	return 1;
}

//2014-03-13 #################对统计表进行查询,并且直接做统计####################################################
int CInfoDeal:: StatTable(char* szDealtype,char *starttime,char *endtime)
{
  char sql[1024],currTime[15];
  CBindSQL ds(DBConn);	
  try
  {
	  memset(currTime,0,sizeof(currTime));
	  getCurTime(currTime);

	  memset(sql,0,sizeof(sql));
	  sprintf(sql,"select count(*) from c_infopoint_table a where a.deal_type = '%s' ",szDealtype);
	  ds.Open(sql,SELECT_QUERY);
	  ds>>mStatTable.NStat_Item_Count;
	  ds.Close();
	  if(mStatTable.NStat_Item_Count == 0)
	  {
		//theLog<<"deal_type="<<szDealtype<<"的统计表汇总格式没有配置"<<endi;
		return -1;
	  }
	  memset(sql,0,sizeof(sql));
	  sprintf(sql,"select a.auditid,a.des_table,a.src_table from c_infopoint_table a "
					" where a.deal_type = '%s' group by a.deal_type,a.auditid,a.des_table,a.src_table",szDealtype);

	  ds.Open(sql,SELECT_QUERY);
	  ds>>mStatTable.szInfoPoint>>mStatTable.SzDesT_Name>>mStatTable.SzSrcT_Name;
	  ds.Close();

	  memset(sql,0,sizeof(sql));
	  sprintf(sql,"select a.des_item,a.src_item,a.item_type from c_infopoint_table a where a.deal_type='%s' order by a.item_seq",szDealtype);
	  ds.Open(sql,SELECT_QUERY);
	  for(int i=0;i<mStatTable.NStat_Item_Count;i++)
	  {
		ds>>mStatTable.SzDes_Item_Name[i]>>mStatTable.SzSrc_Item_Name[i]>>mStatTable.NItem_Type[i];
	  }
	  ds.Close();
	  
	  //查询前先删除上次统计表的数据
	  memset(sql,0,sizeof(sql));
	  sprintf(sql,"delete from %s ",mStatTable.SzDesT_Name); 
	  ds.Open(sql,NONSELECT_DML);
	  ds.Execute();
	  ds.Commit();
	  ds.Close();

	  //##############################统计#################################
	  char time_flag,time_col[30],sql[1024],sysTime[30],tmpTime[15],tmpDate[9],tmpMonth[7];		

	  memset(sysTime,0,sizeof(sysTime));	//目标表估计时间字段
	  strcpy(sysTime,"CREATE_MINUTE");
	  
	  theLog<<"##### 信息点:"<<mStatTable.szInfoPoint<<" ####### "<<endi;
	
		memset(sql,0,sizeof(sql));
		sprintf(sql,"insert into %s (",mStatTable.SzDesT_Name);
	 
		string sqlA1,sqlA2,sqlB1,sqlB2;				//分别连接 原表统统计维度，原表统计项，目标表统计项
		
		time_flag = 'N';
		memset(time_col,0,sizeof(time_col));
		for(int j = 0;j<mStatTable.NStat_Item_Count;j++)	//查询表的统计项统计维度等
		{
			switch(mStatTable.NItem_Type[j])				//区分统计项和统计维度，是为了保证原表和目标表字段对齐
			{	
				case 0:												//统计项
					sqlB2.append(mStatTable.SzDes_Item_Name[j]).append(",");
					sqlA2.append(" sum(").append(mStatTable.SzSrc_Item_Name[j]).append("),");
					break;
				case 1:												//统计维度					
					sqlB1.append(mStatTable.SzDes_Item_Name[j]).append(",");
					sqlA1.append(mStatTable.SzSrc_Item_Name[j]).append(",");
					break;
				case 2:												//求平均值
					sqlB2.append(mStatTable.SzDes_Item_Name[j]).append(",");
					sqlA2.append(" avg(").append(mStatTable.SzSrc_Item_Name[j]).append("),");
					break;
				case 12:
					time_flag = 'Y';
					strcpy(time_col,mStatTable.SzSrc_Item_Name[j]);  //作where的查询条件

					if(strcmp(mStatTable.SzDes_Item_Name[j],"-1"))
					{
						sqlB1.append(mStatTable.SzDes_Item_Name[j]).append(",");
						sqlA1.append(mStatTable.SzSrc_Item_Name[j]).append(",");
					}
					break ;
				case 13:
					sqlB2.append(mStatTable.SzDes_Item_Name[j]).append(",");
					sqlA2.append(currTime).append(",");
					break;
			default :
					break ;
			}

		}
		
		sqlB2.append(sysTime) ; 							 
		//sqlA2.append("to_char(sysdate,'yyyymmddhhmiss')");	//取数据库系统时间
		sqlA2.append(starttime);

		sqlA1 = sqlA1.substr(0, sqlA1.length()-1);				//存放原始表统计维度
		
		char szCondition[256];
		memset(szCondition,0,sizeof(szCondition));
		//判断where条件,通过频率判断是改还是
		if(time_flag == 'Y')
		{
         /*
			memset(mstartTime,0,sizeof(mstartTime));
			memset(mendTime,0,sizeof(mendTime));

			if(strcmp(mStatTable.szRate,"H0") == 0)					//随时
			{
				//当前时间减去15分钟
				strncpy(mendTime,currTime,12);
				mendTime[12]='\0';
				strcat(mendTime,"00");

				memset(tmpTime,0,sizeof(tmpTime));
				long nTgtTime = timeStr2Time(mendTime) - 0*60;
				time2TimeStr(nTgtTime, mstartTime);
			}
			else if(strcmp(mStatTable.szRate,"H1") == 0)				//5分钟
			{
				//当前时间减去15分钟
				strncpy(mendTime,currTime,12);
				mendTime[12]='\0';
				strcat(mendTime,"00");

				memset(tmpTime,0,sizeof(tmpTime));
				long nTgtTime = timeStr2Time(mendTime) - 5*60;
				time2TimeStr(nTgtTime, mstartTime);
			}
			else if(strcmp(mStatTable.szRate,"H2") == 0)				//15分钟
			{
				//当前时间减去15分钟
				strncpy(mendTime,currTime,12);
				mendTime[12]='\0';
				strcat(mendTime,"00");

				memset(tmpTime,0,sizeof(tmpTime));
				long nTgtTime = timeStr2Time(mendTime) - 15*60;
				time2TimeStr(nTgtTime, mstartTime);
			}
			else if(strcmp(mStatTable.szRate,"M1") == 0)				//小时
			{
				//当前时间减去15分钟
				strncpy(mendTime,currTime,12);
				mendTime[12]='\0';
				strcat(mendTime,"00");

				memset(tmpTime,0,sizeof(tmpTime));
				long nTgtTime = timeStr2Time(mendTime) - 60*60;
				time2TimeStr(nTgtTime, mstartTime);
			}
			else if(strcmp(mStatTable.szRate,"L1") == 0)			   //昨天凌晨到今天的数据
			{
				strncpy(mendTime,currTime,8);
				mendTime[8]='\0';
				addDays(-1,mendTime,mstartTime);
				mstartTime[8]='\0';

				strcat(mendTime,"000000");
				strcat(mstartTime,"000000");
			}
			else if(strcmp(mStatTable.szRate,"L2") == 0)			//上个月到这个月月初的数据,这种数据一般是在月初执行的
			{
				strncpy(mendTime,currTime,6);
				mendTime[6]='\0';
				addDays(-27,mendTime,mstartTime);
				mstartTime[6]='\0';

				strcat(mendTime,"00000000");
				strcat(mstartTime,"00000000");
			}
            else
			{
				theLog<<"无效的发送频度:"<<mStatTable.szRate<<endw;
				return -1;
			}
		 */

			sprintf(szCondition,"where %s >= '%s' and %s < '%s'",time_col,starttime,time_col,endtime);
		}
		
		sprintf(sql,"%s%s%s) select %s,%s from %s %s group by %s",sql,sqlB1,sqlB2,sqlA1,sqlA2,mStatTable.SzSrcT_Name,szCondition,sqlA1);

		theLog<<"sql="<<sql<<endi;
		
		//CBindSQL ds(*m_DBConn);
		ds.Open(sql,NONSELECT_DML);
		ds.Execute();
		ds.Commit();
		ds.Close();
	}
	catch(CF_CError ex)
    {	
		//ds.Rollback();
		char errmsg[2048],sz_errtime[15];
		getCurTime(sz_errtime);
		memset(errmsg,0,sizeof(errmsg));
		sprintf(errmsg,"信息点[%s]进行表[%s]统计失败:[%d|%s];sql=[%s]",mStatTable.szInfoPoint,mStatTable.SzDesT_Name,ex.get_appErrorCode(),ex.get_errMessage(),sql);
        theLog<<errmsg<<ende;

		memset(errmsg,0,sizeof(errmsg));
		sprintf(errmsg,"%s|%s",ex.get_appErrorCode(),ex.get_errMessage());
		wrlog("infopt","1","",'E','H',1001,002,sz_errtime,errmsg,__FILE__,__LINE__);
		return -1;
    }
	
  return 0;
}

int CInfoDeal::WriteFile(char* szDealtype,char *service, char *starttime,char *endtime)  //将数据信息写入到文件中
{
      char szOutFile[300];	
      char szTempStr[300];
      
	  GetFileName(szJosn,szDealtype,service);
	  StatTable(szDealtype,starttime,endtime);		//###############2014-03-13 新增接口实现将表统计###############
	  GetFileValue(szDealtype,starttime,endtime);
	  sprintf(szOutFile, "%s.tmp", szJosn);
	  expTrace("Y", __FILE__, __LINE__, "the OutFilename is:%s", szOutFile);
		    
	  ofstream outInfo;
	  outInfo.open(szOutFile);
	  //CBindSQL ds(dbconn_1);
	  CBindSQL ds(DBConn);

  //朝文件里写数据
   if(m_info_file.NInfo_value_Count!=0&&m_info_file.NInfo_Item_Count!=0)
    {
  	  sprintf(szSql,"select ");
      for(int i=0;i<m_info_file.NInfo_Item_Count;i++)
      	{
      	  strcat(szSql,m_info_file.Info_Item[i]);
          strcat(szSql,",");
      	}
  	  szSql[strlen(szSql)-1] = 0; 
      //sprintf(szSql,"%s from %s.%s@%s where create_minute>= '%s' and create_minute < '%s' ",szSql,m_info_file.Info_username,m_info_file.Info_tablename,m_info_file.Info_sysname,starttime,endtime);
      sprintf(szSql,"%s from %s where create_minute>= '%s' and create_minute < '%s' ",szSql,m_info_file.Info_tablename,starttime,endtime);
      //sprintf(szSql,"%s from %s.%s where create_minute>= '%s' and create_minute < '%s' ",szSql,m_info_file.Info_username,m_info_file.Info_tablename,starttime,endtime);
  	  ds.Open(szSql); 
  	  expTrace("Y", __FILE__, __LINE__, "%s",szSql);
  	  
  	  char field_data[512];  
	  char result_data[1024];
	
	  for( int j=0; j<m_info_file.NInfo_value_Count; j++)
	  {
	  	memset(field_data,0,sizeof(field_data));
	  	memset(result_data,0,sizeof(result_data));
	  	
	    sprintf(result_data,"{",result_data);
		for( int i=0; i<m_info_file.NInfo_Item_Count; i++ )
	    {
			ds >> field_data;
			GetVar(szJosn,m_info_file.Info_Item[i],field_data,m_info_file.NItem_Type[i]);
			strcat(result_data,szJosn);
		}		
     	
     	result_data[strlen(result_data)-1] = 0;
     	sprintf(result_data,"%s}",result_data);
      	strcat(result_data,"\n");
      	outInfo<<result_data;
	  }
 
  	  ds.Close();
   	}
//////////////////////////////////////////
	outInfo.close();
	GetFileName(szJosn,szDealtype,service);	    
	sprintf(szTempStr,"%s", szJosn);
	if(rename(szOutFile,szTempStr)!=0)
	 {
	  	expTrace("Y", __FILE__, __LINE__, "rename error:from %s to %s;", szOutFile,szTempStr);
	 }		
	  return 1;
}

void CInfoDeal::SeqSuc(char *szEnd)	//报告本批次完成现在已取消
{
	char szOutFile[300];
	char szTempStr[300];
		

	if (strcmp(m_szBusiClass,"zhcj")==0)
	{
		return; 
	}
	else
	{
		sprintf(szOutFile, "%sBOSSNM.%s.%s.%s.%08d.2000.%s.%s.END.tmp", m_szOutPath, "50-30-31-00-00-000",m_szNetId, m_szToday, m_iSeqID,m_szBusiClass,szEnd);
	 
	}
	
 	 expTrace("Y", __FILE__, __LINE__, "out file is:%s", szOutFile);
	 ofstream outInfo;
	 outInfo.open(szOutFile);
	 outInfo<<"STA/0/"<<endl;	
	 outInfo<<"END"<<endl;
	 outInfo.close();
	 
	 sprintf(szTempStr, "%sBOSSNM.%s.%s.%s.%08d.2000.%s.%s.END", m_szOutPath, "50-30-31-00-00-000",m_szNetId, m_szToday, m_iSeqID,m_szBusiClass,szEnd);
	 if(rename(szOutFile,szTempStr)!=0)
	 {
	  	expTrace("Y", __FILE__, __LINE__, "rename error:from %s to %s;", szOutFile,szTempStr);
	 }
}

int CInfoDeal::GetInfoEnv()
{
	char sz_EnvName[31];
	char sz_EnvValue[301];
	

	CBindSQL ds(DBConn);	
	
	sprintf(szSql, "select ENV_NAME,ENV_VALUE from INFO_PUB_ENV where SERVER_ID='%s'",m_szServiceId);
	ds.Open(szSql);
	while (ds>>sz_EnvName>>sz_EnvValue)
	{
		if (strcmp(sz_EnvName,"DR_ID")==0)
		{
			strcpy(m_szDrId,sz_EnvValue);
			GetVar(szJosn,"DR_ID",m_szDrId,1);
			strcpy(m_szDrId,szJosn);
		}
		else if (strcmp(sz_EnvName,"DATASOURCE")==0)
		{
			strcpy(m_szDataSource,sz_EnvValue);
			GetVar(szJosn,"DATASOURCE",m_szDataSource,1);
			strcpy(m_szDataSource,szJosn);
		}
		else if (strcmp(sz_EnvName,"OUT_PATH")==0)
		{
			strcpy(m_szOutPath,sz_EnvValue);			
		}		
		else if (strcmp(sz_EnvName,"NETID")==0)
		{		
			strcpy(m_szNetId,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"INFODB_SID")==0)
		{		
			strcpy(m_sid,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"INFODB_USERNAME")==0)
		{		
			strcpy(m_username,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"INFODB_PASSWD")==0)
		{		
			strcpy(m_password,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"BUSI_CLASS")==0)
		{		
			strcpy(m_szBusiClass,sz_EnvValue);
		 
		}	
		else if (strcmp(sz_EnvName,"IS_SERV_CAT")==0)
		{		
			m_iIsServCat=atoi(sz_EnvValue);		
		}	
		else if (strcmp(sz_EnvName,"SERBCODE")==0)
		{		
			strcpy(m_szSysBcode,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"SERSCODE")==0)
		{		
			strcpy(m_szSysScode,sz_EnvValue);		
		}	
		else if (strcmp(sz_EnvName,"IS_MAIN_SERVER")==0)
		{		
			m_iIsMain=atoi(sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"TIME_UNIT")==0)
		{		
			iTimeUnit=atof(sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"FEE_UNIT")==0)
		{		
			iFeeUnit=atof(sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"DATE_TYPE")==0)
		{	
			strcpy(m_szDataType,sz_EnvValue);		
		}
		else if (strcmp(sz_EnvName,"IDEP_PATH")==0)
		{	
			strcpy(m_szIdepPath,sz_EnvValue);		
		}		
		else
		{
		}
				
	}
	if(0==m_iIsServCat && 0==strlen(m_szSysBcode))
			return -1;
	ds.Close();	
	chkAllDir(m_szOutPath);
	return 0;
}

int CInfoDeal::GetVar(char *szVarStr,char* szVarName, char* szVarValue,int isInt)
{
	memset(szVarStr,0,sizeof(szVarStr));	
	if (isInt==1)
	{
		sprintf(szVarStr,"%s%s%s:%s",m_szSep,szVarName,m_szSep,szVarValue);
	}
	else
	{
		sprintf(szVarStr,"%s%s%s:%s%s%s",m_szSep,szVarName,m_szSep,m_szSep,szVarValue,m_szSep);
	}
	sprintf(szVarStr,"%s,",szVarStr);
	return 0;
}

int CInfoDeal::GetSerV()
{
	char serv[10];	
	char szPipe[10];
	char szTemp[30];	
	int iTemp;
	CBindSQL ds(DBConn);

	m_vecpServBCode.clear();
	
	try
	{
		sprintf(szSql, "select PROGRAM_NAME,MODULE from INFO_PROMOD");
	  ds.Open(szSql);
	  while(ds>>szTemp>>iTemp)
	  {
	  
		  m_mapProModule.insert(map<string, int>::value_type(szTemp, iTemp));
	  }
	  ds.Close();
	  
	  if (1==m_iIsServCat)
	  {
	  
	  	sprintf(szSql, "select distinct SERV_BCODE from INFO_SERVICE");
	    ds.Open(szSql);
	    while(ds>>iTemp)
	    {
	  	  m_vecpServBCode.push_back(iTemp);	    
	    }
	    ds.Close();
		  
	    sprintf(szSql, "select distinct A.PIPE_ID,B.SERV_BCODE FROM SOURCE A"
	        " INNER JOIN INFO_SERVICE B ON A.SERV_CAT_ID=B.SERV_CAT_ID  ORDER BY A.PIPE_ID");
	    ds.Open(szSql);
	    while(ds>>szPipe>>serv)
	    {
	  	  strcpy(szTemp,"");
	  	  strcat(szTemp,szPipe);
	  	  strcat(szTemp,",");
	  	  strcat(szTemp,serv);	  	
	  	  m_vecServPipe.push_back(szTemp);	    
	    }
	  
	    ds.Close();
	  }
	  
	}
	catch(...)
	{
		return -1;
	}
	
	return 0;

}


//插入info_batch表
int CInfoDeal::GetBatch(char* szAuditId, char* szTypeId, char* szRate)
{
	char szTCurDate[20];
	getCurDate(m_szToday);
	m_szToday[8]=0;
	
	try
	{
		getCurDate(szTCurDate);
	  //strncpy(m_szToday, szCurDate, 8);
		
	  int idoseq=0;
	  int iCount=0;
	  CBindSQL ds(DBConn);	

	  sprintf(szSql, "select INFO_BATCH_ID.NEXTVAL from dual");
	  ds.Open(szSql);
	  ds>>m_iBatchID;
	  ds.Close();
	  
	  sprintf(szSql, "select count(*),nvl(max(doseq), 0) from info_pub_batch where dotime = '%s' and AuditId='%s' and TypeId='%s' and sRate='%s'  and STARTTIME='%s' and ENDTIME='%s' and server_id='%s'", szTCurDate,szAuditId,szTypeId,szRate,m_szChkStart, m_szChkEnd,m_szServiceId);
	  ds.Open(szSql);
	  ds>>iCount>>idoseq;
	  ds.Close();
	  
	  if (0==iCount)
	  {
	  	m_iOrder=0;
	  }
	  else
	  {
	  	m_iOrder=iCount;
	  	m_iSeqID=idoseq;
	  }
    
    if (0==m_iOrder)
    {
	    sprintf(szSql, "select nvl(max(doseq), 0) from info_pub_batch where dotime = '%s' and AuditId='%s' and TypeId='%s' and sRate='%s' and server_id='%s'", szTCurDate,szAuditId,szTypeId,szRate,m_szServiceId);
	    ds.Open(szSql);
	    if (ds>>idoseq)
	    {
		    m_iSeqID = idoseq+1;
	    }
	    ds.Close();
	  }
	  
	  CBindSQL ds2(DBConn);
		sprintf(szSql, "insert into info_pub_batch(batch_id, dotime, DOSEQ, STARTTIME, ENDTIME,auditId,typeid,sRate,server_id) "
			  "values(%d, '%s', %d, '%s', '%s', '%s', '%s','%s','%s')", m_iBatchID, szTCurDate, m_iSeqID, m_szChkStart, m_szChkEnd,szAuditId,szTypeId,szRate,m_szServiceId);
		expTrace("Y", __FILE__, __LINE__, "%s",szSql);
		ds2.Open(szSql);
		ds2.Execute();
		ds2.Close();	
	
	  
	  DBConn.Commit();
	}
	catch(...)
	{
		return -1;
	}
	return 0;
}


int CInfoDeal::SetDate(char* startdate, char* enddate)
{
	getCurDate(m_szToday);
	m_szToday[8]=0;
	expTrace("Y", __FILE__, __LINE__, "today:%s",m_szToday);
	strcpy(m_szChkStart, startdate);
	strcpy(m_szChkEnd, enddate);
	return 0;
}


int CInfoDeal::GetServBCode(char *szStr,int szValue)
{
	memset(szStr,0,sizeof(szStr));	
	
	switch(szValue)
	{
		case 10:
			{
				strcpy(szStr,"语音业务");
				break;
			}
		case 20:
			{
				strcpy(szStr,"数据业务");
				break;
			}
	  case 30:
			{
				strcpy(szStr,"点对点短信业务");
				break;
			}
		case 40:
			{
				strcpy(szStr,"增值业务");
				break;
			}
		case 50:
			{
				strcpy(szStr,"查询业务");
				break;
			}
		case 60:
			{
				strcpy(szStr,"代收费用业务");
				break;
			}
		case 0:
			{
				strcpy(szStr,"语音网间结算");
				break;
			}
		case 	18:
			{
				strcpy(szStr,"数据业务网间结算");
				break;
			}
		default:
			{
				strcpy(szStr,"其他业务");
				break;
			}
	}
	

	
	return 0;
}

