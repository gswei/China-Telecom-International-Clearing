#include "main.h"
using namespace std;
using namespace tpss;

CLog theJSLog;
bool bGetExitSig;
//MdrStatus syn_status;//容灾状态
int pkgstatus; //话单块状态值
string auditkey;
string sessionid;
extern SParameter Param;
int isRedo; //是否重做摊分

SGW_RTInfo rtinfo;
short petri_status = -1; 
#define COMMIT_COUNT	1000	   // 数据库提交的数量限制

C_MainFlow::C_MainFlow()
{
	//vecFile.clear();
	memManager = NULL;
	//chain = NULL;
	pps = NULL;
	res = NULL;
	pListSql = NULL;
	iRunTime = -1;
	conn.close();
	conn = NULL;
	//m_bDBLinkError = FALSE;
	//_DBConn = NULL;
}

C_MainFlow::~C_MainFlow()
{
	//vecFile.clear();
	//FreeFormula(Param.szDebugFlag,&Param.szformulastruct,Param.iFormulacount,Param.iParamcount);
}

int main(int argc, char** argv)
{
    C_MainFlow process;
	process.printVersion();

	if(!process.checkArg(argc, argv))
	{
		return -1;
	}

	if(!process.init(argc, argv))
	{
		goto Exit;
	}
	Exit:
		//theJSLog<<"安全退出程序"<<endi;
	
    BillRate billRate;

	for(int i=0;i<process.source_count;i++)
    {
       billRate.m_init(process.stparam[i].source_id,process.stparam[i],argv[3]);       
    }
	billRate.init(argv[3],argv[2]); // 20131119 add 添加账期字段 
	strcpy(process.jobid,argv[3]);
	process.getSourceInfo();
	theJSLog <<"Init Success.."<<endi;

    /*isRedo = 0; //默认不进行摊分重做
	if ( strcmp(argv[4] ,"-r")==0 )  // -f 第一次摊分 -r 重做摊分
	{
		isRedo = 1;
	} else 
		isRedo = 0; */

	//取话单，从文件或者数据库
	// 如果重新需要先清除表格中的数据
	
    bool result_flag = process.dealAll();
	if (result_flag)
        theJSLog <<"JSRate Over Success.."<<endi;
	else
		theJSLog <<"JSRate Over Fail.."<<endi;

	//process.prcExit();
	//exit(-1);

	return 0;
}


void C_MainFlow::printVersion()
{
	/* 输出模块的主流程名称、版本等信息 */
	printf("*************************************************** \n");
	printf("*   	GuangDong Telecom. GJYW System	\n" );
	printf("*                                                   \n");
	printf("*		jsSettleRate \n");
	printf("*		  Version 1.0.0	\n");
	printf("*      created: 20130708 by lij	\n");
	printf("*************************************************** \n");
};

bool C_MainFlow::checkArg(int argc, char** argv)
{	
	/* 检查输入参数是否正确jsSettleRate   YYYYMM   jobid*/
	if (!(argc ==4))
	{
	    printf("Usage : %s -f0 YYYYMM JOBID \n",argv[0]);
		return false;
	}
	/*if(strlen(argv[2])!=6)
	{
	   printf("Please enter the right cycle like 201307!");
	   return false;
	}*/
 
	char szPathTmp[FILE_NAME_LEN+1];
	strcpy(szPathTmp, argv[0]);
	if(!strncmp(szPathTmp,"../",3))
	{
		getcwd(m_szExePath, PATH_NAME_LEN+1);
		sprintf(m_szExePath, "%s/%s", m_szExePath, szPathTmp);
		strncpy(m_szExeName, strrchr(szPathTmp,'/')+1, strlen(szPathTmp)-(strrchr(szPathTmp,'/')-szPathTmp)+1);
	}
	else if(!strncmp(szPathTmp,"./",2))
	{
		getcwd(m_szExePath, PATH_NAME_LEN+1);
		strncpy(m_szExeName, strrchr(szPathTmp,'/')+1, strlen(szPathTmp)-(strrchr(szPathTmp,'/')-szPathTmp)+1);
	}
	else if(!strncmp(szPathTmp,"/",1))
	{
		strncpy(m_szExeName, strrchr(szPathTmp,'/')+1, strlen(szPathTmp)-(strrchr(szPathTmp,'/')-szPathTmp)+1);
		strncpy(m_szExePath, szPathTmp, strlen(szPathTmp)-strlen(m_szExeName));
	}
	else
	{
		getcwd(m_szExePath, PATH_NAME_LEN+1);
		strcpy(m_szExeName, szPathTmp);
	}
	//theJSLog<<"szProgramPath="<<m_szExePath<<endi;
	//theJSLog<<"szProgramName="<<m_szExeName<<endi;
	return true;
};

bool C_MainFlow::init(int argc, char **argv)
{
    //框架初始化
   if(!PS_Process::init(argc,argv))
   {
      return false;
   }

   if(!(rtinfo.connect()))		//连接内存区
	{
		 return false;
	}
	rtinfo.getDBSysMode(petri_status);		//获取状态
	cout<<"petri_status:"<< petri_status <<endl;

	if(petri_status==304)
	{
		return false;
	} 

	 //DBConnection conn;//数据库连接
  try{			
	if (dbConnect(conn))
	 {
	       //获取数据源总数
			Statement stmt = conn.createStatement();
	        string sql = "select distinct(source_group_id) from C_SETTLE_JOB where job_id = :v1 and valid_flag = 'Y'";
			stmt.setSQLString(sql);
			stmt << argv[3] ;
			stmt.execute();
			stmt>>source_group;	
			//cout << source_group <<endl;
	       
	        sql = "select count(*) from C_SETTLE_JOB where job_id = :v1 and valid_flag = 'Y'";
			stmt.setSQLString(sql);
			stmt << argv[3] ;
			stmt.execute();
			stmt>>source_count;
			//cout << source_count <<endl;
			if( source_count == 0 )
			{
			   theJSLog << "没有匹配的数据源，请检查标志并将标志置为Y " << endw;
			   return false;
			}


			sql = "select source_id from C_SETTLE_JOB where job_id = :v1 and valid_flag = 'Y'";
			stmt.setSQLString(sql);
			stmt << argv[3] ;
			stmt.execute();
			//cout << sql <<endl;
			
			for(int i=0;i<source_count;i++)
			{
			   stmt >> stparam[i].source_id;
			   
			}
	 }else{
	 	theJSLog<<"connect error."<<endi;
	 }
	    //conn.close();
	 } catch( SQLException e ) {
		cout<<e.what()<<endl;
		conn.close();
		throw jsexcp::CException(errno, "获取数据源信息失败", __FILE__, __LINE__);
    }

	 // 写sql 文件
	 //isWriteSQLFile(); 
	//初始化容灾平台,同时获取到主备系统状态
    //syn_status = syncInit(); 
	bGetExitSig = false;
	// 启动命令 jsSettleRate   YYYYMM   jobid

	//char szLogPath[] = {"/mboss/jtcbs/zbjs1_a/log"};
	//char szLogLevel[] = {"1"};
	theJSLog.setLog(PS_Process::szLogPath, PS_Process::szLogLevel, "RATE", source_group, 1);
	strcpy(billmonth,argv[2]);	   
	strcpy(Param.ratecycle,argv[2]);
	strcpy(jobid,argv[3]);
	strcpy(Param.szSourceGroup,source_group);
}

bool C_MainFlow::dealFile(STparam &szstparam)
{
    /*BillRate BillRate;
	CF_MemFileI _infile;
	CF_MemFileO _outfile;
	CFmt_Change _inrcd,_outrcd;
	MessageParser  pMessage;
	
	char szinFiletype[10];
	char szFileouttype[10];    
	memset(tmp,0,sizeof(tmp));
	strcpy(szinFiletype,Param.infmt_type); //入口格式
	strcpy(szFileouttype,Param.outfmt_type);
	
	
	_infile.Init(szinFiletype);
	_outfile.Init(szFileouttype);
	_inrcd.Init(szinFiletype);
	_outrcd.Init(szFileouttype);*/
	char fileName[1024];
    char tmp[512];

    map<string,string>::iterator it; 
    int i=0;
    //cout << "szstparam.source_id = " << szstparam.source_id<<endl;
   if( (it = sourcemes.find(szstparam.source_id)) != sourcemes.end() )
   	{
   	//}
    
    //for(it = sourcemes.begin();it != sourcemes.end();++it)
    //{
      strcpy(m_szSourceId,it->first.c_str());  //数据源
      strcpy(m_szinFilePath,it->second.c_str());
      strcat(m_szinFilePath,szstparam.invalue);
      //strcat(m_szinFilePath,stparam[i].invalue); //实际路径
      strcpy(m_szoutFilePath,it->second.c_str());
      strcat(m_szoutFilePath,szstparam.outvalue);//实际输出路径
      //strcat(m_szoutFilePath,stparam[i].outvalue);
      i++;
      theJSLog << "数据源和取数路径为 : " << m_szSourceId << "  m_szinFilePath :" << m_szinFilePath << endi;

      if(scan.openDir(m_szinFilePath))
		{
			theJSLog << "打开话单文件目录失败" << m_szinFilePath << endi;
			return ;	
		}
      //循环读取目录，扫描文件夹，获取文件
		int rett = -1 ;
		int counter = 0;
		char filter[256] ="*txt";  //文件格式，目前以txt 结尾为标准   
		while(1) 
		{				   
			memset(fileName,0,sizeof(fileName));
			rett = scan.getFile(filter,fileName);  
			
			if(rett == 100)
			{		
				cout<<"此时文件目录下面没有文件，扫描下个数据源"<<endl;
				break ;  
			}
			if(rett == -1)
			{
				continue;			//表示获取文件信息失败
			}
            theJSLog << "fileName = " << fileName << endi;
					counter++;				//扫描一次文件计数器+1				
					if(counter > 10)
					{
										//cout<<"扫描10次后，跳到下个数据源"<<endl;
						break;
					}

					/*过滤文件*.tmp,*TMP,~* */			
					char* p = strrchr(fileName,'/');
					//char tmp[512];
					memset(tmp,0,sizeof(tmp));
					strcpy(tmp,p+1);
					//cout<<"文件名："<<tmp<<endl;

					if(tmp[0] == '~' ) continue;
					if(strlen(tmp) > 2)
					{		
						int pos = strlen(tmp)-3;
						if((strcmp(tmp+pos,"tmp") && strcmp(tmp+pos,"TMP")) == 0) 
						{
							continue;
						}
					}				
					cout<<"扫描到文件："<<fileName<<endl;
					strcpy(m_szFileName,p+1);  //复制文件名,去路径				
					/*memset(tmp,0,sizeof(tmp));
					strcpy(tmp,fileName);
					strcat(tmp,".tmp");
					if(rename(fileName,tmp) != 0) //文件改名成临时文件
					{
						cout<<"文件改名失败!"<<fileName<<endl;
						continue ;
					}	*/	
					//strcat(m_szFileName,m_szinFilePath); //实际文件名，加路径			
					//strcat(m_szOutFileName,m_szoutFilePath); //实际文件名，加路径		
					strcat(m_szinFilePath,m_szFileName); //实际文件名，加路径			
					strcat(m_szoutFilePath,m_szFileName); //实际文件名，加路径
					//dealFile();
					//dealRecord(stparam[i]);					
					 if( dealRecord(szstparam) )
	               	{
	               	    insertLog(szstparam.source_id,"Y");
	               	} else {
                        insertLog(szstparam.source_id,"E");
	               	}					
				}//while(1)
				scan.closeDir();				
    }
		sleep(5);
		return true;
}

bool C_MainFlow::dealRecord(STparam &szstparam)
{
    BillRate billRate;
	CF_MemFileI _infile;
	CF_MemFileO _outfile;
	CFmt_Change _inrcd,_outrcd;
	MessageParser  pMessage;
	
	char szinFiletype[10];
	char szFileouttype[10];
    char fileName[1024];
    char tmp[512];
	memset(tmp,0,sizeof(tmp));

	strcpy(szinFiletype,szstparam.intxt_type); //入口格式
	strcpy(szFileouttype,szstparam.outtxt_type);
	//cout << " szinFiletype = " <<szinFiletype<<endl;
	//cout << " szFileouttype = " <<szFileouttype<<endl;
	
	_infile.Init(szinFiletype);
	_outfile.Init(szFileouttype);
	_inrcd.Init(szinFiletype);
	_outrcd.Init(szFileouttype);

    cout << " m_szFileName = " <<m_szFileName<<endl;
    cout << " szstparam.source_id = " <<szstparam.source_id<<endl;
	/*pMessage.setMessage(MESSAGE_NEW_BATCH, szstparam.source_id, m_szFileName,1111);
	billRate.message(pMessage);
	theJSLog <<"Batch Success.."<<endi;
	theJSLog <<"start file.."<<endi;
	pMessage.setMessage(MESSAGE_NEW_FILE, szstparam.source_id, m_szFileName,1111);	//m_szSourceId	
	billRate.message(pMessage);*/
	theJSLog <<"record .."<<endi;

    //cout << "m_szinFilePath = " << m_szinFilePath<<endl;
    //cout << "m_szoutFilePath = " << m_szoutFilePath<<endl;
    _infile.Open(m_szinFilePath);
    _outfile.Open(m_szoutFilePath);
    
	//_infile.Open("/mboss/home/zhjs/work/vivi/NOG.0001");
	//_outfile.Open("/mboss/home/zhjs/work/vivi/NOG.0001.result");	
	PacketParser ps;
	ResParser retValue;
	while( _infile.readRec(_inrcd) != READ_AT_END)
	{
		ps.setRcd(_inrcd);
		_outrcd.Copy_Record(_inrcd);
		retValue.setRcd(_outrcd);
		billRate.execute(ps,retValue);
		_outfile.writeRec(retValue.m_outRcd);
				
	}
	/*pMessage.setMessage(MESSAGE_END_FILE, m_szSourceId, m_szOutFileName,1111);			
	billRate.message(pMessage);
	theJSLog <<"end file.."<<endi;
	pMessage.setMessage(MESSAGE_END_BATCH_END_DATA, m_szSourceId, m_szOutFileName,1111);						
	billRate.message(pMessage);
	theJSLog <<"end batch .."<<endi;
	pMessage.setMessage(MESSAGE_NEW_BATCH, m_szSourceId, m_szOutFileName,1111);
	billRate.message(pMessage);
	theJSLog <<"Batch Success.."<<endi;
	pMessage.setMessage(MESSAGE_END_BATCH_END_DATA, m_szSourceId, m_szOutFileName,1111);						
	billRate.message(pMessage);
	theJSLog <<"end batch .."<<endi;*/
	_outfile.Close();
	_infile.Close();
	cout << "deal Record over" << endl;
    return true;
}
bool C_MainFlow::dealTable(STparam &szstparam)
{
    BillRate billRate;
	
	MessageParser  pMessage;
	
	char szinTabletype[10];
	char szoutTabletype[10];
    char tableName[1024];
    char tmp[512];
	memset(tmp,0,sizeof(tmp));
	strcpy(szinTabletype,szstparam.intxt_type); //入口格式
	strcpy(szoutTabletype,szstparam.outtxt_type); //与数据库表结果一致	

      CFmt_Change _inrcd,_outrcd;
	_inrcd.Init(szinTabletype);
	_outrcd.Init(szoutTabletype);

	PacketParser ps;
	ResParser retValue;	
	
    /////////////////////////////////////////////////////////
    //从数据库表中读取数据，一条条处理
    //try{	
    //DBConnection conn;//数据库连接
	//if (dbConnect(conn))
	 //{
			m_stmt = conn.createStatement();
			Statement stmt = conn.createStatement();
			char szSqlTmp[5000];

            char column_name[15];
            char all_column_name[1024];
            char column_value[15];
            char all_column_value[1024];
            int column_no;
            int value_num=0;
            int value_len=0;
            char column_out_value[1024];
            char sql[5000] ={0};
            record_num =0;
           try{
           	// 重做的时候先清理原表数据
           	//cout << "isRedo = " <<isRedo<<endl;
           //	if(isRedo == 1)
           	//{
           	theJSLog << "删除原表记录" <<endi;
           	    sprintf(szSqlTmp,"delete from %s_%s where %s like '%s%s'",szstparam.outvalue,billmonth,szstparam.settle_month,billmonth,"%");		
			    stmt.setSQLString(szSqlTmp);		
			    stmt.execute();
			    stmt.commit();
           	//}   
            //获取变量的总数
            sprintf(szSqlTmp,"select count(*) from C_TXTFILE_FMT where filetype_id = '%s'",szstparam.intxt_type);
			stmt.setSQLString(szSqlTmp);
			stmt.execute();
			stmt>> column_no;

			sprintf(szSqlTmp,"select COLNAME from C_TXTFILE_FMT where filetype_id = '%s' order by col_index",szstparam.intxt_type);
			stmt.setSQLString(szSqlTmp);
			stmt.execute();
			while(stmt>>column_name)
			{
			   strcat(all_column_name,column_name);
	           strcat(all_column_name,",");
			}
			all_column_name[strlen(all_column_name)-1] = 0;  //获取SQL 语句中的变量值
			//cout << "all_column_name = " << all_column_name<<endl;

			//实际值的数量
			sprintf(szSqlTmp,"select count(*) from %s_%s where %s like '%s%s'",szstparam.invalue,billmonth,szstparam.settle_month,billmonth,"%");		
            //theJSLog <<"szSqlTmp="<<szSqlTmp<<endl;
			stmt.setSQLString(szSqlTmp);
			stmt.execute();
			stmt >> value_num;	
			//theJSLog << "record_num="<<value_num<<endl;

			int iMultiNum=0;
			int iMaxFetchNum=COMMIT_COUNT*10;
			int iPerCount=value_num/iMaxFetchNum +1;

                    //循环获取一定量的数据库数据，直到所有数据都已处理
			for(int kk=0;kk<iPerCount;kk++){
				int iBeginCount=0;
				int iEndCount=0;

				if(record_num==0){
					iBeginCount=0;
					iEndCount=iMaxFetchNum;
				}else{
				       iBeginCount=iMaxFetchNum*iMultiNum +1;
					iEndCount=iMaxFetchNum*(iMultiNum+1);
					if(iEndCount>value_num)
						iEndCount = value_num;
				}
			//获取值
			//sprintf(szSqlTmp,"select %s from %s_%s where %s like '%s%s'",all_column_name,szstparam.invalue,billmonth,szstparam.settle_month,billmonth,"%");		
                     memset(szSqlTmp,0,sizeof(szSqlTmp));
			sprintf(szSqlTmp,"select %s from (select rownum rn,a.%s from %s_%s a where a.%s like '%s%s') where rn between %d and %d",
				all_column_name,all_column_name,szstparam.invalue,billmonth,szstparam.settle_month,billmonth,"%",iBeginCount,iEndCount);		
			 theJSLog<<"szSqlTmp="<<szSqlTmp<<endl;
			stmt.setSQLString(szSqlTmp);		
			stmt.execute();
			int i=0;
			
			while(stmt >> column_value)
			{
			   strcat(all_column_value,column_value);
	           strcat(all_column_value,",");
	           i++;

	           if(i==column_no)  //完成的一条记录
	           	{
	           	 			
	           	   all_column_value[strlen(all_column_value)-1]=0;
	           	 //  cout <<"all_column_value = "<< all_column_value << endl;
	           	   i=0; //  i 重新置位	           	   
	           	   _inrcd.Set_record(all_column_value,strlen(all_column_value));
	           	   ps.setRcd(_inrcd);
		           _outrcd.Copy_Record(_inrcd);
		           retValue.setRcd(_outrcd);
		          // cout << "billrate.execute " << endl;
		           
		           billRate.execute(ps,retValue); 
		           int dealFlag=billRate.dealFlag;
		          // cout<<"dealFlag:"<<dealFlag<<endl;
		          if(dealFlag!=0 && dealFlag!=-1 && dealFlag!=-2 && dealFlag!=-3 && dealFlag !=-4)
		          	continue;
		           
		           //获取返回结果值   int CFmt_Change::Get_Field(int count, char *array)
	               char *tmp_value = retValue.m_outRcd.Get_record();
		           sprintf(column_out_value,"%s",tmp_value);
	               //cout << "column_out_value = "<< column_out_value << endl; 

                   //char *sql = getSql(&column_out_value);
                   
	               memset(sql,0,sizeof(sql));
                   getSql(column_out_value,all_column_name,sql,szstparam.outvalue);
                   ps.clearAll();
                   retValue.clearAll();
	               //cout << "传入的SQL  " << sql<<endl;
	              // insertTableData(sql); 
	               //insertLog(szstparam.source_id,"Y");
	               if( insertTableData(sql) )
	               	{
	               	    record_num++;
	               	    //insertLog(szstparam.source_id,"Y");
	               	} else {
                        //insertLog(szstparam.source_id,"E");
                        theJSLog << "插入数据出错" <<endd;
	               	}
	              memset(all_column_value,0,sizeof(all_column_value));
	              memset(column_out_value,0,sizeof(column_out_value));

	              //达到一定数量后提交
	              if( record_num%COMMIT_COUNT == 0 )
	              	{
		               theJSLog<<"提交条数:"<<record_num<<endi;
		               m_stmt.commit();
		               m_stmt.close();
		               m_stmt = conn.createStatement();
	                }
	              // end 一条完整记录
	           	}
			}	
			iMultiNum++;
		  }
			
		     //处理完所有数据
	         if(value_num != record_num)
	         {
				theJSLog<<"failed,处理的记录数["<<record_num<<"]和输入的记录数["<<value_num<<"]不一致!"<<endw;
				m_stmt.rollback();
				insertLog(szstparam.source_id,"E");
				//同时需要将开始的提交数据删除
				sprintf(szSqlTmp,"delete from %s_%s where %s like '%s%s'",szstparam.outvalue,billmonth,szstparam.settle_month,billmonth,"%");		
			    stmt.setSQLString(szSqlTmp);		
			    stmt.execute();
			    stmt.commit();
	            return false;
	         } 
	         else
	         {
	            insertLog(szstparam.source_id,"Y");
				m_stmt.commit();
				m_stmt.close();	
	            conn.close();	            
	            cout << "Success ,dealTable over ,record_num="<<record_num<<endl;
	            return true;
	         }
			
			//cout << "dealTable over 2" <<endl;
		  
	       } catch( SQLException e ){

				m_stmt.rollback();
				theJSLog<<"dealTable() 数据库异常:"<<e.what()<<endw;

				sprintf(szSqlTmp,"delete from %s_%s where %s like '%s%s'",szstparam.outvalue,billmonth,szstparam.settle_month,billmonth,"%");		
			    stmt.setSQLString(szSqlTmp);		
			    stmt.execute();
			    stmt.commit();
				conn.close();
				return false;
		    } 
	       catch (jsexcp::CException ce) {
				
				m_stmt.rollback();
				theJSLog<<"dealTable() 异常:"<<ce.GetErrMessage()<<endw;

		        sprintf(szSqlTmp,"delete from %s_%s where %s like '%s%s'",szstparam.outvalue,billmonth,szstparam.settle_month,billmonth,"%");		
			    stmt.setSQLString(szSqlTmp);			
			    stmt.execute();
			    stmt.commit();
				conn.close();
				//throw jsexcp::CException(errno, "获取批价数据信息失败", __FILE__, __LINE__);
				return false;
		    }
				
	 //}
	//else
	 //{
	 	//theJSLog<<"connect error."<<endi;
	 	//return false;
	// }
	             
	    //conn.close();
	 
    return true;
}

void C_MainFlow::getSourceInfo()
{
  // int path_num;
  //DBConnection conn2;//数据库连接
   try{			
	//if (dbConnect(conn2))
	 {
	       //由开始获取所有数据源组下面的数据源改为通过jobid来获取数据源
	        Statement stmt1 = conn.createStatement();
	        string sourcepath;
	        for(int i=0;i<source_count;i++)
	        {
	           string sql = "select source_path from I_SOURCE_DEFINE where source_id = :v1";		
			   stmt1.setSQLString(sql);
			   stmt1 << stparam[i].source_id ;
			   stmt1.execute();
			   stmt1 >> sourcepath;
			    if ( sourcepath[strlen(sourcepath.c_str())-1] != '/' )
                	strcat(sourcepath.c_str(),"/");
			   sourcemes.insert(map<string,string>::value_type(stparam[i].source_id,sourcepath));
			   theJSLog << "数据源组中配置获取成功" <<endi;
	        }
			
	       //获取数据源和路径
			/*Statement stmt = conn.createStatement();	        			
			string sql = "select count(*) from C_SOURCE_GROUP_CONFIG a ,I_SOURCE_DEFINE b where a.source_group = :v1 and A.SOURCE_ID = B.SOURCE_ID";		
			stmt.setSQLString(sql);
			stmt << source_group ;
			stmt.execute();
			stmt >> path_num;

			if ( path_num > 0) {
			string sql = "select a.source_id,b.source_path from C_SOURCE_GROUP_CONFIG a ,I_SOURCE_DEFINE b where a.source_group = :v1 and A.SOURCE_ID = B.SOURCE_ID";		
			stmt.setSQLString(sql);
			stmt << source_group ;
			stmt.execute();
			for(int i=0;i<path_num;i++){
				std::string sourceid,sourcepath;
             while ( stmt >> sourceid >> sourcepath )
              {
                if ( sourcepath[strlen(sourcepath.c_str())-1] != '/' )
                	strcat(sourcepath.c_str(),"/");
                sourcemes.insert(map<string,string>::value_type(sourceid,sourcepath));
               theJSLog << "数据源组中配置获取成功" <<endi;
               // if(source_path[i].szSourcePath[strlen(source_path[i].szSourcePath)-1] != '/')
			         //strcat(source_path[i].szSourcePath, "/");
               }
			 }
			} else {
              theJSLog << "数据源组中配置错误" <<endi;
			}*/
	 }
	//else{
	    //conn2.close();
	 	//theJSLog<<"connect error."<<endi;
	 //}
	    //conn2.close();
	 } catch( SQLException e ) {
		cout<<e.what()<<endl;
		//conn2.close();
		throw jsexcp::CException(errno, "获取数据源信息失败", __FILE__, __LINE__);
    }
}

bool C_MainFlow::insertTableData(char *sql)
{
  //cout << "sql 1= " << sql << endl;
  //char allsql[2048];
  //memset(allsql,0,sizeof(allsql));
  //strcpy(allsql,sql);

// try{		
    //DBConnection conn3;//数据库连接
	//if (dbConnect(conn3))
	 //{
			//Statement stmt3 = conn.createStatement();
			//char *szSqlTmp = getSql(&*sql);
			//cout << "allsql 2= " << sql << endl;
			
	        //rtinfo.getDBSysMode(petri_status);		//获取状态
	        //cout<<"petri_status:"<< petri_status <<endl;

			   m_stmt.setSQLString(sql);
			//cout<<"petri_status:"<< petri_status <<endl;
			//if(petri_status==303)
			//{
			   //cout<<"petri_status:"<< petri_status <<endl;
			   m_stmt.execute();
			   //cout<<"petri_status:"<< petri_status <<endl;
			   //m_stmt.commit();
			   //cout<<"petri_status:"<< petri_status <<endl;
			   //conn3.close();
		    //} else
		    //{
		    //错误日志
		     // conn3.close();
		    //  return false;
		    //}
			//sql 语句执行的同时写sql文件
			//writeSQL(sql);
	 //}
	//else
	// {
	   // conn3.close();
	 	//theJSLog<<"connect error."<<endi;
	 //}
	    //conn3.close();
	// } 
   /* catch( SQLException e ) {
		cout<<e.what()<<endl;
		conn3.close();
		throw jsexcp::CException(errno, "获取批价数据信息失败", __FILE__, __LINE__);
    }*/
	 //cout << "insert Table data over" <<endl;
   return true;
}

void C_MainFlow::getSql(char *sqltmp,char *tableitem,char *result,char *tablename)
{
   //cout<<"getsql: sqltmp="<<sqltmp<<" tableitem="<<tableitem<<endl;

   char total_sql[10000]={0};
   char alltableitem[500]={0};
   //cout << "sql = " << *sqltmp <<endl;
   //string_replace(string(sqltmp),",","','");
   ReplaceStr(sqltmp,",","'|'");
   //cout << "sql = " << sqltmp <<endl;
   ReplaceStr(sqltmp,"|",",");
   //cout << "sql = " << sqltmp <<endl;   
   //cout << tableitem<<endl;

  /* strcat(total_sql,"insert into ");
   strcat(total_sql,tablename);
   //strcat(total_sql,"(");
   //strcat(total_sql,tableitem);
   strcat(total_sql,")");
   strcat(total_sql," values('");
   strcat(total_sql,sqltmp);
   strcat(total_sql,"')");*/
   strcat(alltableitem,tableitem);
   
   //cout << "total_sql2 = " << total_sql <<endl;
   //sprintf(total_sql,"insert into %s values('%s",stparam.outpath,*sqltmp);
   //cout << "total_sql = " << total_sql <<endl;
   sprintf(total_sql, "insert into %s_%s (%s) values('%s')",tablename,billmonth,alltableitem,rtrim_lc(sqltmp));		
   //cout << "total_sql = " << total_sql <<endl;
   strcpy(result,total_sql);
   //return true;
}

int C_MainFlow::ReplaceStr(char *sSrc, char *sMatchStr, char *sReplaceStr)
{
        int  StringLen;
        char caNewString[1024];
        char caOldString[1024];
        sprintf(caOldString,"%s",sSrc);
        //cout << "sMatchStr " << sMatchStr<< endl;
        //cout << "sReplaceStr " <<sReplaceStr << endl;

        char *FindPos = strstr(caOldString, sMatchStr);  //sSrc 源字符串,sMatchStr 匹配字符串，sReplaceStr 替换字符串
        if( (!FindPos) || (!sMatchStr) )
                return -1;

        while( FindPos )
        {
                memset(caNewString, 0, sizeof(caNewString));
                StringLen = FindPos - caOldString;
                strncpy(caNewString, caOldString, StringLen);
                strcat(caNewString, sReplaceStr);
                strcat(caNewString, FindPos + strlen(sMatchStr));
                strcpy(caOldString, caNewString);
                FindPos = strstr(caOldString, sMatchStr);
        }
        strcpy(sSrc,caOldString);
        return 0;
}

void C_MainFlow::insertLog(char *source_id,char *dealflag)
{
   //SGW_RTInfo rtinfo;
   //DBConnection conn2;//数据库连接
 try{			
	        char sql[1024];
			memset(sql,0,sizeof(sql));
	        //string sql = "insert into D_SETTLE_LOG(source_id,deal_time,billmonth,deal_flag,job_id) values(:v1,to_char(SYSDATE,'yyyymmddhh24miss'),:v2,:v3)";
	        sprintf(sql, "insert into D_SETTLE_LOG(source_id,deal_time,billmonth,deal_flag,job_id) values('%s',to_char(SYSDATE,'yyyymmddhh24miss'),'%s','%s','%s')",
	                  source_id,billmonth,dealflag,jobid);		
			m_stmt.setSQLString(sql);
			theJSLog << sql <<endd;
			m_stmt.execute();

	 } catch( SQLException e ) {
		cout<<e.what()<<endl;
		//conn2.close();
		throw jsexcp::CException(errno, "获取数据源信息失败", __FILE__, __LINE__);
    }
	 //cout<< "insertLog over" <<endl;
	 return ;
}

bool C_MainFlow::dealAll()
{
    bool result;
	for(int i=0;i<source_count;i++)
	{
	    //char flag[5];
	   
	 if ( strcmp(stparam[i].intype, "F") ==0 )  //默认从文件中取话单内容
		{
			 result = dealFile(stparam[i]);				
				
		} else if (strcmp(stparam[i].intype, "T") ==0 ) //从数据库表中获取话单内容
		{
		    result = dealTable(stparam[i]);
		    //cout << "result = " <<result<<endl;
		}
		if (result == false)
		{
		  break;
		}
		
	     // 处理完之后提交sql文件
         //commitSQLFile();
		//cout << "flag = " <<flag<<endl;
		//cout << "process.stparam[i].source_id = " <<process.stparam[i].source_id<<endl;
		//process.insertLog(process.stparam[i].source_id,flag);
	}
	return result;
}
char* rtrim_lc(char* s)  
{  
    //char* s_s=new char[strlen(s)+1];  
	
	char d_s[1024];
	memset(d_s,0,sizeof(1024));
    strcpy(d_s,s);    
    int d_len=strlen(d_s);  

    for(int i=d_len-1;i>=0;i--)  
    {  
         if(d_s[i]==' ')  
         {  
             d_s[i]='\0';  
         }  
    }  
    //char* d_s=new char[strlen(s_s)];  
    //strcpy(d_s,s_s);  	
	//strcpy(d_s,s_s);
	//delete[] s_s;

    return d_s;   
}
void dealSignal(int sig)
{
	if(sig == SIGTERM)
	{
		theJSLog<<"收到终止程序的信号："<<sig<<endi;
		bGetExitSig = true;
	}
	else
		bGetExitSig = false;
}
