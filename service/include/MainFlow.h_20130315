/****************************************************************
filename: mainflow.h
module:
created by: ouyh
create date: 
version: 3.0.0
description:
    插件运行平台
*****************************************************************/

#ifndef _MAINFLOW_H_
#define _MAINFLOW_H_ 1

#include <stdio.h>
#include <iostream.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <strings.h>
#include <time.h>
#include <stdarg.h>
#include <errno.h>
#include <map>
#include <signal.h>

#include "CF_CMemFileIO.h"
#include "CF_Cerrcode.h"
#include "CF_CLogger.h"
#include "CF_Common.h"
#include "CF_CProcessMonitor.h"
#include "CF_CInterrupt.h"
#include "CF_CMessagePPQ.h"
#include "DealFile.h"
#include "PrepCommon.h"
#include "VersionInfo.h"
#include "AccessMem.h"

//add by weixy 20080530
//#include "C_SourcePriority.h"
//int grepAndSortFile(map<string, int> &sourcePriority, SFileStruct * sfile, int &fileNum);
//end add by weixy 20080530

class C_MainFlow
{
private:
	char m_szExeName[PATH_NAME_LEN+1];
	char m_szExePath[PATH_NAME_LEN+1];
	char m_szEnvPath[PATH_NAME_LEN+1];
	char m_szEnvFile[FILE_NAME_LEN+1];
	char m_szLastSource[MAXLENGTH+1];
	char m_szLastDay[8+1];
	
	/* 需要绑定到表达式上的变量 */
	char m_szSourceId[MAXLENGTH+1];
	char m_szLocalTollcode[MAXLENGTH+1];
	char m_szSysTime[MAXLENGTH+1];
	char m_szFileName[MAXLENGTH+1];
	char m_szNewName[MAXLENGTH+1];
	char m_szReceiveTime[14+1];

	CDealFile DealFile;
	SParameter Param;			//存储传递至dealfile函数变量的结构体
	CMessagePPQ respMsgHandle;
	vector<SFileStruct> vecFile;
	vector<SFileStruct> nextBatch;
	map<string, SSourceStruct> mapSource;
	//Interpreter Compile;			//表达式，用于文件名检查
	BaseAccessMem *memManager;	//共享内存相关
	filterchain::FilterChain *chain;
	PacketParser *pps;
	ResParser *res;
	SListSql* pListSql;			//存储list_sql表的更新标志
	int iListCount;
	int iUndoFlag;
	int iRad;
	int iRunTime;
	bool m_bDBLinkError;

	int getScheme(struct SParameter &Param);
	char* getMsgKey(CReadIni &IniFile, char *szServiceId, char *szSourceGroupId);
	int getFilesFromDB();
	int getFilesFromPPQ();
	void resetHFiles();
	void getSourceInfo();
	bool getFileInfo(struct SFileStruct &FileStruct, bool bNewFile=false);
	void process();
	void releasePoint();
	void checkTime();
	void CheckWorkpath();

public:
	C_MainFlow();
	~C_MainFlow();
	void printVersion();
	bool checkArg(int argc, char** argv);
	bool init();
	void run();
	void Update();
	void exit();
	bool DBLinkError();
	void resetAll();
};

void dealSignal(int sig);

#endif

